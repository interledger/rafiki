type Query {
  "Fetch a paginated list of grants."
  grants(
    "Forward pagination: Cursor (grant ID) to start retrieving grants after this point."
    after: String
    "Backward pagination: Cursor (grant ID) to start retrieving grants before this point."
    before: String
    "Forward pagination: Limit the result to the first **n** grants after the `after` cursor."
    first: Int
    "Backward pagination: Limit the result to the last **n** grants before the `before` cursor."
    last: Int
    "Filter grants based on specified criteria such as ID, state, or finalization reason."
    filter: GrantFilter
    "Specify the sort order of grants based on their creation date, either ascending or descending."
    sortOrder: SortOrder
    "Filter grants by a specific tenant. This can only be performed by the operator."
    tenantId: ID
  ): GrantsConnection!

  "Fetch a specific grant by its ID."
  grant("Unique identifier of the grant." id: ID!): Grant!
}

type Mutation {
  "Revoke an existing grant."
  revokeGrant(input: RevokeGrantInput!): RevokeGrantMutationResponse!
}

type PageInfo {
  "The cursor used to fetch the next page when paginating forward."
  endCursor: String
  "Indicates if there are more pages when paginating forward."
  hasNextPage: Boolean!
  "Indicates if there are more pages when paginating backward."
  hasPreviousPage: Boolean!
  "The cursor used to fetch the next page when paginating backward."
  startCursor: String
}

type GrantsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges representing grants and cursors for pagination."
  edges: [GrantEdge!]!
}

type GrantEdge {
  "A grant node in the list."
  node: Grant!
  "A cursor for paginating through the grants."
  cursor: String!
}

input GrantFilter {
  "Filter grants by their unique identifier."
  identifier: FilterString
  "Filter grants by their state."
  state: FilterGrantState
  "Filter grants by their finalization reason."
  finalizationReason: FilterFinalizationReason
}

input FilterString {
  "Array of strings to filter by."
  in: [String!]
}

input FilterGrantState {
  "List of states to include in the filter."
  in: [GrantState!]
  "List of states to exclude in the filter."
  notIn: [GrantState!]
}

input FilterFinalizationReason {
  "List of finalization reasons to include in the filter."
  in: [GrantFinalization!]
  "List of finalization reasons to exclude in the filter."
  notIn: [GrantFinalization!]
}

input RevokeGrantInput {
  "Unique identifier of the grant to revoke."
  grantId: String!
}

interface Model {
  "Unique identifier for the model."
  id: ID!
  "The date and time when the model was created."
  createdAt: String!
}

type Grant implements Model {
  "Unique identifier of the grant."
  id: ID!
  "Wallet address of the grantee's account."
  client: String!
  "Details of the access provided by the grant."
  access: [Access!]!
  "Current state of the grant."
  state: GrantState!
  "Specific outcome of a finalized grant, indicating whether the grant was issued, revoked, or rejected."
  finalizationReason: GrantFinalization
  "The date and time when the grant was created."
  createdAt: String!
  "Unique identifier of the tenant associated with the grant."
  tenantId: ID!
}

type Access implements Model {
  "Unique identifier of the access object."
  id: ID!
  "Wallet address of the sub-resource (incoming payment, outgoing payment, or quote)."
  identifier: String
  "Type of access (incoming payment, outgoing payment, or quote)."
  type: String!
  "Actions allowed with this access."
  actions: [String]!
  "Limits for an outgoing payment associated with this access."
  limits: LimitData
  "The date and time when the access was created."
  createdAt: String!
}

type LimitData {
  "Wallet address URL of the receiver."
  receiver: String
  "Amount to debit."
  debitAmount: PaymentAmount
  "Amount to receive."
  receiveAmount: PaymentAmount
  "Interval between payments."
  interval: String
}

type PaymentAmount {
  "The value of the payment amount."
  value: UInt64!
  "Should be an ISO 4217 currency code whenever possible, e.g. `USD`. For more information, refer to [assets](https://rafiki.dev/overview/concepts/accounting/#assets)."
  assetCode: String!
  "Difference in orders of magnitude between the standard unit of an asset and a corresponding fractional unit."
  assetScale: UInt8!
}

type RevokeGrantMutationResponse {
  "Unique identifier of the revoked grant."
  id: ID!
}

enum GrantState {
  "The grant request is processing."
  PROCESSING
  "The grant request is awaiting interaction."
  PENDING
  "The grant request has been approved."
  APPROVED
  "The grant request has been finalized, and no more access tokens or interactions can be made."
  FINALIZED
}

enum GrantFinalization {
  "The grant was issued successfully."
  ISSUED
  "The grant was revoked."
  REVOKED
  "The grant request was rejected."
  REJECTED
}

enum SortOrder {
  "Sort the results in ascending order."
  ASC
  "Sort the results in descending order."
  DESC
}

"""
The `UInt8` scalar type represents unsigned 8-bit whole numeric values, ranging from 0 to 255.
"""
scalar UInt8

"""
The `UInt64` scalar type represents unsigned 64-bit whole numeric values. It is capable of handling values that are larger than the JavaScript `Number` type limit (greater than 2^53).
"""
scalar UInt64
